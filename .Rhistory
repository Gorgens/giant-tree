addCircleMarkers(data = tree80WGS84, group = "trees80", color = 'black') %>%
addLayersControl(
overlayGroups = c("chm", "factors", "trees", "trees80"),
options = layersControlOptions(collapsed = FALSE)
)
# How to use leaflet
# https://rstudio.github.io/leaflet/showhide.html
leaflet() %>% addTiles() %>%                          # Visualizar CHM no leaflet
#addRasterImage(t128chmCrop, colors = palChm, opacity = 0.8, group = "chm") %>%
#addRasterImage(windSpeedCrop, colors = palWind, opacity = 0.8, group = "factors") %>%
addCircleMarkers(data = treesWGS84, group = "trees", color = 'red') %>%
addCircleMarkers(data = tree80WGS84, group = "trees80", color = 'black') %>%
addLayersControl(
overlayGroups = c("chm", "factors", "trees", "trees80"),
options = layersControlOptions(collapsed = FALSE)
)
rm(list = ls(globalenv()))
gc()
rm(list = ls(globalenv()))
gc()
rm(list = ls(globalenv()))
gc()
rm(list = ls(globalenv()))
gc()
require(lidR)
require(magrittr)
require(dynatopmodel)
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\T0128_1.las')
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\T0128_1.las')
projection(ctg) = '+init=epsg:31976'
#summary(ctg)
opt_chunk_size(ctg) = 20          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 25          # define o tamanho em metros do tile
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 22          # define o tamanho em metros do tile
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 23          # define o tamanho em metros do tile
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 16          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 26          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 30         # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 33         # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 35         # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
# define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 32          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 33          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
ctg %>% plot(chunk_pattern = TRUE)
gndClassification = function(cluster)
{
las = cluster %>% readLAS()
if(is.empty(las)) return(NULL)
lascsf = las %>% lasground(csf())
return(lascsf)
}
output = catalog_apply(ctg, gndClassification)
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\T0128gnd_{ID}'
output = catalog_apply(ctg, gndClassification)
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
plot(ctg)
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\T0128_1.las')
projection(ctg) = '+init=epsg:31976'
#summary(ctg)
opt_chunk_size(ctg) = 33          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\T0128gnd_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
gndClassification = function(cluster)
{
las = cluster %>% readLAS()
if(is.empty(las)) return(NULL)
lascsf = las %>% lasground(csf())
return(lascsf)
}
lascsf_list = catalog_apply(ctg, gndClassification)
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
projection(ctg) = '+init=epsg:31976'
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\dtm\\T0128dtm_{ID}'
dtmCreation = function(cluster)
{
lascsf = cluster %>% readLAS()
if(is.empty(lascsf)) return(NULL)
dtm = lascsf %>% grid_terrain(1, knnidw())
return(dtm)
}
dtm_list = catalog_apply(ctg, dtmCreation)
dtm_list = do.call(raster::merge, dtm_list)
opt_chunk_size(ctg) = 33          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
opt_chunk_size(ctg) = 33          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\dtm\\T0128dtm_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
opt_chunk_size(ctg) = 20          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\dtm\\T0128dtm_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
require(lidR)
require(magrittr)
require(dynatopmodel)
rm(list = ls(globalenv()))
gc()
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\T0128_1.las')
projection(ctg) = '+init=epsg:31976'
#summary(ctg)
opt_chunk_size(ctg) = 33          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\T0128gnd_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
# Importa o catalog do transecto -------------------------------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\NP_T-0128_FWF.las')
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\T0128_1.las')
projection(ctg) = '+init=epsg:31976'
ctg %>% plot(chunk_pattern = TRUE)
#summary(ctg)
opt_chunk_size(ctg) = 33          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\T0128gnd_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
gndClassification = function(cloud){
las = cloud %>% readLAS()
if(is.empty(las)) return(NULL)
lascsf = las %>% lasground(csf())
lascsf %<>% lasfilter(buffer == 0)
return(lascsf)
}
lascsf_list = catalog_apply(ctg, gndClassification)
# Cria o mdt -----------------------------------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
ctg %>% plot(chunk_pattern = TRUE)
# Cria o mdt -----------------------------------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
opt_chunk_size(ctg) = 33          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\dtm\\T0128dtm_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
# Cria o mdt -----------------------------------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\dtm\\T0128dtm_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
dtmCreation = function(cloud)
{
lascsf = cloud %>% readLAS()
if(is.empty(lascsf)) return(NULL)
dtm = lascsf %>% grid_terrain(1, knnidw())
return(dtm)
}
dtm_list = catalog_apply(ctg, dtmCreation)
dtm_list = do.call(raster::merge, dtm_list)
plot(dtm_list)
dtm_list = do.call(merge, dtm_list)
dtm = do.call(merge, dtm_list)
require(raster)
dtm_list = do.call(raster::merge, dtm_list)
dtm_list[1]
dtm_list[[1]]
temp = raster(dtm_list[[1]])
plot(temp)
temp = do.call(raster, dtm_list)
temp = lapply(dtm_list,raster)
dtm = do.call(merge, temp)
plot(dtm)
# Normalizar a nuvem
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
# Normalizar a nuvem --------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\norm\\T0128dtm_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
?lasnormalize
# Normalizar a nuvem --------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\norm\\T0128norm_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
normalization = function(cloud, dtm)
{
lascsf = cloud %>% readLAS()
if(is.empty(lascsf)) return(NULL)
lasnorm = lascsf %>% lasnormalize(knnidw())
return(lasnorm)
}
lasnorm_list = catalog_apply(ctg, normalization)
normalization = function(cloud, dtm)
{
lascsf = cloud %>% readLAS()
if(is.empty(lascsf)) return(NULL)
lasnorm = lascsf %>% lasnormalize(knnidw())
lasnorm %<>% lasfilter(buffer == 0)
return(lasnorm)
}
# Normalizar a nuvem --------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\')
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\norm\\T0128norm_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
normalization = function(cloud, dtm)
{
lascsf = cloud %>% readLAS()
if(is.empty(lascsf)) return(NULL)
lasnorm = lascsf %>% lasnormalize(knnidw())
lasnorm %<>% lasfilter(buffer == 0)
return(lasnorm)
}
lasnorm_list = catalog_apply(ctg, normalization)
?grid_canopy
# Criar CHM ---------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\norm\\')
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\chm\\T0128chm_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
chmCreation = function(cloud)
{
lasnorm = cloud %>% readLAS()
if(is.empty(lasnorm)) return(NULL)
chm = lasnorm %>% grid_canopy(0.5, p2r(subcircle = 0.15))
return(chm)
}
chm_list = catalog_apply(ctg, chmCreation)
chm_list2 = lapply(chm_list, raster)
chm = do.call(merge, chm_list2)
plot(chm)
kernel = matrix(1,3,3)
schm = raster::focal(chm, w = kernel, fun = median, na.rm = TRUE)
plot(schm, col = height.colors(30))
ttops = tree_detection(schm, lmf(30))   # Encontrar pontos de máximo
col1 = height.colors(50)
plot(ttops, col = "black", add = T)
# Importa o catalog do transecto -------------------------------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\NP_T-0128_FWF.las')
#summary(ctg)
opt_chunk_size(ctg) = 33          # define o tamanho em metros do tile
#ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\T0128_1.las')
projection(ctg) = '+init=epsg:31976'
#summary(ctg)
opt_chunk_size(ctg) = 33          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\gnd\\T0128gnd_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
# Importa o catalog do transecto -------------------------------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\NP_T-0128_FWF.las')
#ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\T0128_1.las')
projection(ctg) = '+init=epsg:31976'
#summary(ctg)
opt_chunk_size(ctg) = 100          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 5         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation transect\\gnd\\T0128gnd_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
gndClassification = function(cloud){
las = cloud %>% readLAS()
if(is.empty(las)) return(NULL)
lascsf = las %>% lasground(csf())
lascsf %<>% lasfilter(buffer == 0)
return(lascsf)
}
# Importa o catalog do transecto -------------------------------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\NP_T-0128_FWF.las')
projection(ctg) = '+init=epsg:31976'
#summary(ctg)
opt_chunk_size(ctg) = 510          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 50         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\T0128_{ID}'
ctg %>% plot(chunk_pattern = TRUE)
# Recorta região da nuvem com centro 'XY' e raio 'window' ------------------
xcoord = 241463
ycoord = 79296
window = 500
sampleArea = lasclipRectangle(ctg, xcoord - window, ycoord - window, xcoord + window, ycoord + window)
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\sample_{ID}'
# Recorta região da nuvem com centro 'XY' e raio 'window' ------------------
xcoord = 241463
ycoord = 79296
window = 500
sampleArea = lasclipRectangle(ctg, xcoord - window, ycoord - window, xcoord + window, ycoord + window)
# Processa área recortada para identificar árvores individuais -------------
las = readLAS("C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\sample_1.las")
lascsf = lasground(las, csf(), F)           # Classificar pontos de terreno
dtm = grid_terrain(lascsf, 1, knnidw())     # Criar MDT
plot(dtm)
lasflat = lasnormalize(lascsf, dtm)         # Normalizar nuvem
max(lasflat$Z)                              # Conferir altura do outlier
lasflat = lasfilter(lasflat, Z < 110)       # Remover outlier
plot(lasflat, clear_artifacts=F)
max(lasflat$Z)                              # Conferir altura do outlier
lasflat = lasfilter(lasflat, Z < 100)       # Remover outlier
plot(lasflat, clear_artifacts=F)
lasfilternoise = function(las, sensitivity){
p95 = grid_metrics(las, ~quantile(Z, probs = 0.95), 10)
las = lasmergespatial(las, p95, "p95")
las = lasfilter(las, Z < p95*sensitivity)
las$p95 = NULL
return(las)
}
lasflat = lasfilternoise(lasflat, sensitivity = 1.2)
plot(lasflat)
chmfill = grid_canopy(lasflat, 0.5,         # Criar CHM
p2r(subcircle = 0.15))
plot(chmfill)
kernel = matrix(1,3,3)
schm = raster::focal(chmfill, w = kernel, fun = median, na.rm = TRUE)
plot(schm, col = height.colors(50))
tree1 = read.csv("profile_tree1.csv")
tree1 = read.csv("profile_tree1.csv")
ggplot(tree1) + geom_line(aes(dist, dtm), colour = "black") +
geom_line(aes(dist, dsm), colour = "gray") + geom_vline(xintercept = 263.69, colour = "red") +
theme_bw() + ylab("Elevation (m)") +
xlab("Horizontal distance (m)") +
annotate("text", x = 50, y = 210, label = "North", size = 2) +
annotate("text", x = 600, y = 210, label = "South", size = 2) +
theme(legend.background = element_blank(),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
text=element_text(size=8, family="sans"),
axis.text.x = element_text(size = 8))
require(ggplot2)
ggplot(tree1) + geom_line(aes(dist, dtm), colour = "black") +
geom_line(aes(dist, dsm), colour = "gray") + geom_vline(xintercept = 263.69, colour = "red") +
theme_bw() + ylab("Elevation (m)") +
xlab("Horizontal distance (m)") +
annotate("text", x = 50, y = 210, label = "North", size = 2) +
annotate("text", x = 600, y = 210, label = "South", size = 2) +
theme(legend.background = element_blank(),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
text=element_text(size=8, family="sans"),
axis.text.x = element_text(size = 8))
require(lidR)
plot.las = readLAS("tree25.las")
plot.las = plot.las@data
plot.las$Z = plot.las$Z - 217.27
plot.las[plot.las$Z <= 0.01,'Z'] = 0.01
plot.las$Znorm = plot.las$Z
gmax = max(plot.las$Z)
bin = 0.02 * gmax
ggplot(plot.las, aes(X, Znorm)) +
geom_point(alpha = 1/10, colour = "black", size = 0.8) +
#geom_point(colour = "darkgreen", size = 0.8) +
xlab("X coordinate") + ylab("Height (m)") +
ylim(0, 100) +
scale_x_continuous(label=comma, breaks = scales::pretty_breaks(n = 2)) +
theme(legend.background = element_blank(),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
text=element_text(size=8, family="sans"),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8))
ggplot(plot.las, aes(X, Znorm)) +
geom_point(alpha = 1/10, colour = "black", size = 0.8) +
#geom_point(colour = "darkgreen", size = 0.8) +
xlab("X coordinate") + ylab("Height (m)") +
ylim(0, 100) +
#scale_x_continuous(label=comma, breaks = scales::pretty_breaks(n = 2)) +
theme(legend.background = element_blank(),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
text=element_text(size=8, family="sans"),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8))
g1d = ggplot(plot.las, aes(X, Znorm)) +
geom_point(alpha = 1/10, colour = "black", size = 0.8) +
#geom_point(colour = "darkgreen", size = 0.8) +
xlab("X coordinate") + ylab("Height (m)") +
ylim(0, 100) +
#scale_x_continuous(label=comma, breaks = scales::pretty_breaks(n = 2)) +
theme(legend.background = element_blank(),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
text=element_text(size=8, family="sans"),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8))
jpeg("the tree.jpg", width = 6, height = 14, units = "cm", res = 300)
print(g1d)
dev.off()
g1d = ggplot(plot.las, aes(X, Znorm)) +
geom_point(alpha = 1/10, colour = "black", size = 0.8) +
#geom_point(colour = "darkgreen", size = 0.8) +
xlab("X coordinate") + ylab("Height (m)") +
ylim(0, 100) +
#scale_x_continuous(label=comma, breaks = scales::pretty_breaks(n = 2)) +
theme(legend.background = element_blank(),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
text=element_text(size=8, family="sans"),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8))
jpeg("the tree.jpg", width = 10, height = 14, units = "cm", res = 300)
print(g1d)
dev.off()
g1d = ggplot(plot.las, aes(X, Znorm)) +
#geom_point(alpha = 1/10, colour = "black", size = 0.8) +
geom_point(colour = "darkgreen", size = 0.8) +
xlab("X coordinate") + ylab("Height (m)") +
ylim(0, 100) +
#scale_x_continuous(label=comma, breaks = scales::pretty_breaks(n = 2)) +
theme(legend.background = element_blank(),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
text=element_text(size=8, family="sans"),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8))
jpeg("the tree.jpg", width = 10, height = 14, units = "cm", res = 300)
print(g1d)
dev.off()
write.csv(plot.las, "tree coordinates.csv")
require(lidR)
require(ggplot2)
ggplot(plot.las, aes(X, Znorm-3.54)) +
#geom_point(alpha = 1/10, colour = "black", size = 0.8) +
geom_point(colour = "darkgreen", size = 0.8) +
xlab("X coordinate") + ylab("Height (m)") +
ylim(0, 100) +
#scale_x_continuous(label=comma, breaks = scales::pretty_breaks(n = 2)) +
theme(legend.background = element_blank(),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
text=element_text(size=8, family="sans"),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8))
max(plot.las$Znorm-3.54)
g1d = ggplot(plot.las, aes(X, Znorm-3.54)) +
#geom_point(alpha = 1/10, colour = "black", size = 0.8) +
geom_point(colour = "darkgreen", size = 0.8) +
xlab("X coordinate") + ylab("Height (m)") +
ylim(0, 100) +
#scale_x_continuous(label=comma, breaks = scales::pretty_breaks(n = 2)) +
theme(legend.background = element_blank(),
legend.key = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
strip.background = element_blank(),
plot.background = element_blank(),
text=element_text(size=8, family="sans"),
axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8))
jpeg("the tree.jpg", width = 10, height = 14, units = "cm", res = 300)
print(g1d)
dev.off()
