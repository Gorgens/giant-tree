#
# Author: Prof. Eric Bastos Gorgens
# Title: Extreção de árvores usando o LiDR - Área exemplo
#
############################################################################33

require(lidR)
require(magrittr)
require(dynatopmodel)

# Importa o catalog do transecto -------------------------------------------
ctg = catalog('C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\NP_T-0128_FWF.las')
projection(ctg) = '+init=epsg:31976'
#summary(ctg)
opt_chunk_size(ctg) = 510          # define o tamanho em metros do tile
opt_chunk_buffer(ctg) = 50         # define o buffer em metros de cada tile
opt_output_files(ctg) = 'C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\sample_{ID}'

ctg %>% plot(chunk_pattern = TRUE)

# Recorta região da nuvem com centro 'XY' e raio 'window' ------------------
xcoord = 241463
ycoord = 79296
window = 500
sampleArea = lasclipRectangle(ctg, xcoord - window, ycoord - window, xcoord + window, ycoord + window)
  plot(sampleArea)

# Processa área recortada para identificar árvores individuais -------------
las = readLAS("C:\\Users\\gorge\\Documents\\GIS DataBase\\FES Paru\\tree segmentation\\sample_1.las")
  plot(las, clear_artifacts=F)

lascsf = lasground(las, csf(), F)           # Classificar pontos de terreno
  plot(lascsf, color='Classification')
dtm = grid_terrain(lascsf, 1, knnidw())     # Criar MDT
  plot(dtm)
  plot_dtm3d(dtm, color='red')
lasflat = lasnormalize(lascsf, dtm)         # Normalizar nuvem
  plot(lasflat, clear_artifacts=F)
max(lasflat$Z)                              # Conferir altura do outlier
  
lasfilternoise = function(las, sensitivity){ # criar função para filtrar outliear de forma local
  p95 = grid_metrics(las, ~quantile(Z, probs = 0.95), 10)
  las = lasmergespatial(las, p95, "p95")
  las = lasfilter(las, Z < p95*sensitivity)
  las$p95 = NULL
  return(las)
}

lasflat = lasfilternoise(lasflat, sensitivity = 1.2)    # remove outlier
  plot(lasflat)
  
chmfill = grid_canopy(lasflat, 0.5,         # Criar CHM
                      p2r(subcircle = 0.15))
  plot(chmfill)
kernel = matrix(1,3,3)
schm = raster::focal(chmfill, w = kernel, fun = median, na.rm = TRUE)
  plot(schm, col = height.colors(50))
  
ttops = tree_detection(chmfill, lmf(30))   # Encontrar pontos de máximo
  head(ttops)
  col1 = height.colors(50)
  plot(schm, col = col1)
  plot(ttops, col = "black", add = T)
giant = lasfilter(las, treeID == head(ttops[ttops$Z == max(ttops$Z),])$treeID)
  plot(giant)

las = lastrees(las,                         # Segmentar a árvore
               dalponte2016(chmfill, ttops))
  plot(las, color = "treeID", colorPalette = col2)


